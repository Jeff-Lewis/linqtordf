#summary Rules for building SPARQL queries out of LINQ queries.
== Introduction ==

This covers the syntactic process of representing the same query in SPARQL as is represented in a LINQ query, but also rules for generating identifiers, URIs, FILTERs, UNIONs and other aspects of well-formed RDF.

The example syntax for this page is based upon the [http://linqtordf.googlecode.com/svn/trunk/src/unit-testing/rdf-music/Track.cs Track] class


==LINQ Query Examples==

The following is a list of possible LINQ queries. Each is followed by a sample of the SPARQL that should be generated by LINQ to RDF.

  * Select all
{{{
IRdfQuery<Track> qry = new RDF(ts).ForType<Track>(); 
var q = from t in qry
	select new t;
}}}
    * Should produce SPARQL similar to the following:
{{{
@prefix a: <http://aabs.purl.org/ontologies/2007/04/music#> .
@prefix xsdt: <http://xsdtUri> .

SELECT _:Title _:ArtistName _:AlbumName _:Year _:GenreName _:Comment _:FileLocation _:Rating
WHERE {
  _:Track rdfs:type a:Track .
  _:Track a:title ?Title .
  _:Track a:artistName> ?ArtistName .
  _:Track a:albumName ?AlbumName .
  _:Track a:year ?Year .
  _:Track a:genreName ?GenreName .
  _:Track a:comment ?Comment .
  _:Track a:fileLocation ?FileLocation .
  _:Track a:rating ?Rating .
}

}}}
  * Select with simple where containing EqExpression
{{{
IRdfQuery<Track> qry = new RDF(ts).ForType<Track>(); 
var q = from t in qry
	where t.Year == 2006
	select new t;
}}}
    * Should produce SPARQL similar to the following:
{{{
@prefix a: <http://someUri> .
@prefix xsdt: <http://xsdtUri> .

SELECT ...
WHERE {

}
}}}
  * Select with Where containing AndAlsoExpression
{{{
IRdfQuery<Track> qry = new RDF(ts).ForType<Track>(); 
var q = from t in qry
	where t.Year == 2006 &&
	t.GenreName == "History 5 | Fall 2006 | UC Berkeley" 
	select new t;
}}}
    * Should produce SPARQL similar to the following:
{{{
@prefix a: <http://someUri> .
@prefix xsdt: <http://xsdtUri> .

SELECT ...
WHERE {

}
}}}
  * Select with Where containing simple OrElseExpression
{{{
IRdfQuery<Track> qry = new RDF(ts).ForType<Track>(); 
var q = from t in qry
	where t.Year == 2006 ||
	t.GenreName == "History 5 | Fall 2006 | UC Berkeley" 
	select new t;
}}}
    * Should produce SPARQL similar to the following:
{{{
@prefix a: <http://someUri> .
@prefix xsdt: <http://xsdtUri> .

SELECT ...
WHERE {

}
}}}
  * Select with Where containing AndAlsoExpression clauses combined by OrElseExpression
{{{
IRdfQuery<Track> qry = new RDF(ts).ForType<Track>(); 
var q = from t in qry
	where (t.Year == 2006 &&
	t.GenreName == "History 5 | Fall 2006 | UC Berkeley") ||
	(t.ArtistName == "Rory Blythe" && t.Year == 2007)
	select new t;
}}}
    * Should produce SPARQL similar to the following:
{{{
@prefix a: <http://someUri> .
@prefix xsdt: <http://xsdtUri> .

SELECT ...
WHERE {

}
}}}
  * Simple select with a projection
{{{
IRdfQuery<Track> qry = new RDF(ts).ForType<Track>(); 
var q = from t in qry
	select new {t.Title, t.FileLocation};
}}}
    * Should produce SPARQL similar to the following:
{{{
@prefix a: <http://someUri> .
@prefix xsdt: <http://xsdtUri> .

SELECT ...
WHERE {

}
}}}
  * Simple select with a projection not using same names as source properties
{{{
IRdfQuery<Track> qry = new RDF(ts).ForType<Track>(); 
var q = from t in qry
	select new {MyTitle = t.Title, MyFileLocation = t.FileLocation};
}}}
    * Should produce SPARQL similar to the following:
{{{
@prefix a: <http://someUri> .
@prefix xsdt: <http://xsdtUri> .

SELECT ...
WHERE {

}
}}}